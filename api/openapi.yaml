openapi: "3.0.0"
info:
  version: 1.0.0
  title: wcafe
  description: wcafe store
servers:
  - url: http://{host}:{port}/api/v1
    description: 開発用
    variables:
      host:
        default: ec2-18-182-64-245.ap-northeast-1.compute.amazonaws.com
      port:
        default: '8080'
paths:
# pathsオブジェクト
  /stores:
    get:
      summary: 店舗リスト
      tags:
        - stores
      parameters: 
        - name: limit
          in: query
          description: 1ページ当たりの店舗数の表示制限
          schema:
            type: integer
        - name: offset
          in: query
          description: 表示する店舗のページ番号の指定
          schema:
            type: integer
      responses: #レスポンスを定義
        '200':
          description: 店舗の一覧表示
          content:
            application/json: # レスポンスの形式を指定
              schema:
                type: object
                properties:
                  stores:
                    type: array
                    items:
                      $ref: "#/components/schemas/stores"  #参照するモデル

    post:
      summary: 店舗の新規登録
      tags:
        - stores
      parameters: []
      requestBody: #リクエストボディ
          description: 店舗の新規登録
          required: true
          content:
            application/json:
              schema: #POSTするオブジェクト
                $ref: "#/components/schemas/stores" 
      responses:
        '201':
          description: 新規登録に成功
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/stores"
        '400':
          description: 無効なリクエスト
          content:
            application/json:
              schema:
                example: 
                  code: 400
                  message: Bad Request

  /stores/{store_id}:
    get:
      summary: ID指定による店舗情報を取得
      tags:
        - stores
      parameters:
        - name: store_id
          in: path
          description: 取得対象の店舗 ID
          required: true
          schema:
            type: string
            format: UUID
      responses:
        '200':
          description: 取得に成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stores'
        '404':
          description: 無効なパスの指定
          content:
            application/json:
              schema:
                example: 
                  code: 404
                  message: Not Found

    patch:
      summary: ID指定による店舗情報の更新
      tags:
        - stores
      parameters: 
        - name: store_id
          in: path
          description: store識別子
          required: true
          schema: 
            type: string
            format: UUID
      requestBody:
        description: 店舗の更新情報
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/stores"
      responses:
        '200':
          description: 更新情報表示
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/stores"
        '400':
          description: 無効なリクエスト
          content:
            application/json:
              schema:
                example: 
                  code: 400
                  message: Bad Request
        '404':
          description: 無効なパスの指定
          content:
            application/json:
              schema:
                example: 
                  code: 404
                  message: Not Found
    delete:
      summary: ID指定による店舗情報の削除
      tags:
        - stores
      parameters: 
        - name: store_id
          in: path
          description: 店舗ID
          required: true
          schema: 
            type: string
            format: UUID
      responses:
        '204':
          description: 店舗情報削除
          content:
            application/json:
              schema:
                example: 
                  code: 204
                  message: No Content
        '404':
          description: 無効なパスの指定
          content:
            application/json:
              schema:
                example: 
                  code: 404
                  message: Not Found
        '409':
          description: 指定したstore_idがpetsテーブルで使用中のためコンフリクト
          content:
            application/json:
              schema:
                example: 
                  code: 409
                  message: Conflict

  /pets:
    get:
      summary: 商品リスト
      tags:
        - pets
      parameters: []
      responses:
        '200':
          description: 商品一覧の表示
          content:
            application/json:
              schema:
                type: object
                properties:
                  pets:
                    type: array
                    items:
                     $ref: "#/components/schemas/pets"
    post: 
      summary: 新規商品登録
      tags: 
        - pets
      description: 新規商品登録
      parameters: []
      requestBody: # リクエストボディ
        description: 商品登録
        content:
          application/json:
            schema: # POSTするオブジェクト
              $ref: '#/components/schemas/pets'
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pets'
        '400':
          description: 無効なリクエスト
          content:
            application/json:
              schema:
                example: 
                  code: 400
                  message: Bad Request

  /pets/{pet_id}:
    get:
      summary: ID指定による商品取得
      tags:
        - pets
      description: 該当する商品を返す
      parameters: # リクエストパラメータ
        - name: pet_id
          in: path # パラメータをパス内に含める
          description: 商品ID
          required: true
          schema:
            type: string
            format: UUID
      responses:
        '200':
          description: 商品情報
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/pets'

    patch:
      summary: ID指定による商品の更新
      tags:
        - pets
      description: 該当する商品情報を更新
      parameters:
       - name: pet_id
         in: path
         description: 商品ID
         required: true
         schema:
            type: string
            format: UUID
      requestBody: # リクエストボディ
        description: 商品登録
        content:
          application/json:
            schema: # POSTするオブジェクト
              $ref: '#/components/schemas/pets'
            example:
              age: 5
      responses:
        '200':
          description: 商品情報更新
          content:
            application/json:
              schema:
                type: object
                properties:
                  pet:
                    $ref: '#/components/schemas/pets'
                example:
                  id: "65f79f22-73b8-11ea-bc55-0242ac130003"
                  species: "Canine"
                  name: "toy poodle"
                  age: 5
                  store_id: "75a68334-73b8-11ea-bc55-0242ac130003"
                  
    delete:
      summary: ID指定による商品情報の削除
      tags:
        - pets
      parameters: 
        - name: pet_id
          in: path
          description: 商品ID
          required: true
          schema: 
            type: string
            format: UUID
      responses:
        '204':
          description: 商品情報削除
        '404':
          description: 無効なパスの指定
          content:
            application/json:
              schema:
                example: 
                  code: 404
                  message: Not Found
            
  /users:
    get:
      tags:
        - users
      summary: ユーザ一覧取得
      description: ユーザ一覧取得
      parameters: []
      responses:
        '200':
          description: ユーザ一覧の表示
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/users'
                example:
                  users:
                    - id: "89043cdf-0c06-4c74-99e6-6ae920"
                      number: 1
                      name: "Sano"
                    - id: "919dfefd-0b0a-4665-b7d9-a189e2"
                      number: 2
                      name: "Suzuki"
                  
    post:
      tags:
       - users
      summary: ユーザ新規作成
      description: ユーザ新規作成
      requestBody:
        description: ユーザの新規登録
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/users"
        required: true
      responses:
        '201':
          description: ユーザの新規登録
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
        '400':
          description: 無効なリクエスト
          content:
            application/json:
              schema:
                example: 
                  code: 400
                  message: Bad Request

  /users/{user_id}:
    get:
      tags:
        - users
      summary: ID指定によるユーザ詳細情報取得
      description: ID指定によるユーザ詳細情報取得
      parameters:
        - name: user_id
          in: path
          description: ユーザ識別子
          required: true
          schema:
            type: string
            format: UUID
      responses:
        '200':
          description: ユーザ情報
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'
        '404':
          description: 無効なパスの指定
          content:
            application/json:
              schema:
                example: 
                  code: 404
                  message: Not Found

    patch:
      tags: 
        - users
      summary: ID指定によるユーザ詳細情報の更新
      description: ID指定によるユーザ詳細情報の更新
      parameters:
        - name: user_id
          in: path
          description: ユーザ識別子
          required: true
          schema:
            type: string
            format: UUID
      requestBody:
        description: ユーザの更新情報
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users'
            example:
              name: "Abe"
              address: "Makuhari"
      responses:
        '200':
          description: ユーザ情報更新
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/users'
              example:
                id: "55f79f22-73b8-11ea-bc55-0242ac130003"
                number: 1234
                name: "Abe"
                address: "Makuhari"
                email: "aaa@example.com"
        '400':
          description: 無効なリクエスト
          content:
            application/json:
              schema:
                example: 
                  code: 400
                  message: Bad Request
        '404':
          description: 無効なパスの指定
          content:
            application/json:
              schema:
                example: 
                  code: 404
                  message: Not Found

    delete:
      summary: ID指定によるユーザー情報の削除
      tags:
        - users
      parameters: 
        - name: user_id
          in: path
          description: ユーザーID
          required: true
          schema: 
            type: string
            format: UUID
      responses:
        '204':
          description: ユーザー情報削除
        '404':
          description: 無効なパスの指定
          content:
            application/json:
              schema:
                example: 
                  code: 404
                  message: Not Found

components:
  schemas:
    stores:
      type: object
      properties:
        id:
          description: 店の識別子
          example: "55579f22-73b8-11ea-bc55-0242ac130555"
          type: string
          format: UUID
          readOnly: true
        name:
          description: 店名
          example: "Shinagawa-Pet-Shop"
          type: string
        tag:
          description: 店の種類
          example: "Pet shop"
          type: string
        address:
          description: 住所
          example: "Minato-ku"
          type: string
        strong_point:
          description: 店の強み
          example: "High quality!"
          type: string
        created_at:
          description: 作成日時
          example: "2020-05-01 00:49:07"
          type: string
          readOnly: true
        updated_at:
          description: 更新日時
          example: "2020-05-01 00:49:07"
          type: string
          readOnly: true
      required:
        - name  
        - tag
        - address
          
    pets:
      type: object
      properties:
        id:
          description: 商品の識別子
          example: "7527c67c-bff5-4b62-92cd-0253a417ca7f"
          type: string
          format: UUID
          readOnly: true
        species:
          description: 商品種
          example: "Canine"
          type: string
        name:
          description: 商品名
          example: "Shiba lnu"
          type: string
        age:
          description: 商品の年齢
          example: 2
          type: integer
        store_id:
          description: 店の識別子
          example: "5579f22-73b8-11ea-bc55-0242ac130555"
          type: string
          format: UUID
        created_at:
          description: 作成日時
          example: "2020-05-01 00:49:07"
          type: string
          readOnly: true
        updated_at:
          description: 更新日時
          example: "2020-05-01 00:49:07"
          type: string
          readOnly: true
      required: 
        - species
        - name
        - age
        - store_id
        
    users:
      type: object
      properties:
        id:
          description: ユーザ識別子
          example: "89043cdf-0c06-4c74-99e6-6ae920"
          type: string
          format: UUID
          readOnly: true
        number:
          description: 会員番号
          example: 1234
          type: integer
          readOnly: true
        name:
          description: 氏名
          example: "Sano"
          type: string
        address:
          description: 住所
          example: "Shinagawa"
          type: string
        email:
          description: メールアドレス
          example: "aaa@example.com"
          type: string
          format: email
        created_at:
          description: 作成日時
          example: "2020-05-01 00:49:07"
          type: string
          readOnly: true
        updated_at:
          description: 更新日時
          example: "2020-05-01 00:49:07"
          type: string
          readOnly: true
      required: 
        - number
        - name
