// Code generated by MockGen. DO NOT EDIT.
// Source: service/pets_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	service "github.com/nfv-aws/wcafe-api-controller/service"
	reflect "reflect"
)

// MockPetService is a mock of PetService interface.
type MockPetService struct {
	ctrl     *gomock.Controller
	recorder *MockPetServiceMockRecorder
}

// MockPetServiceMockRecorder is the mock recorder for MockPetService.
type MockPetServiceMockRecorder struct {
	mock *MockPetService
}

// NewMockPetService creates a new mock instance.
func NewMockPetService(ctrl *gomock.Controller) *MockPetService {
	mock := &MockPetService{ctrl: ctrl}
	mock.recorder = &MockPetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPetService) EXPECT() *MockPetServiceMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockPetService) GetAll() (service.Pets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].(service.Pets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPetServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPetService)(nil).GetAll))
}

// CreateModel mocks base method.
func (m *MockPetService) CreateModel(c *gin.Context) (service.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", c)
	ret0, _ := ret[0].(service.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateModel indicates an expected call of CreateModel.
func (mr *MockPetServiceMockRecorder) CreateModel(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockPetService)(nil).CreateModel), c)
}

// GetByID mocks base method.
func (m *MockPetService) GetByID(id string) (service.Pet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(service.Pet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPetServiceMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPetService)(nil).GetByID), id)
}
